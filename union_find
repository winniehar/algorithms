class unionFind:
  # constructor with n items
  # rank can be by height or by size (number of elements)
  def __init__(self, n):
    self.rank = [1] * n
    self.parent = [i for i in range(n)]

  # find the parent/representative of the set given an item x
  def find(self, x):
    if self.parent[x] == x:
      return x
    else:
       res = self.find(self.parent[x])
       self.parent[x] = res
       return res

  # union two sets represented by items x and y
  def union(self, x, y):
    xset = self.find(x)
    yset = self.find(y)

    # if x and y are in the same set
    if xset == yset: return

    # put the smaller one under the bigger one so the bigger 
    # rank will still have the same height/size
    if self.rank[xset] < self.rank[yset]:
      self.parent[xset] = yset
    elif self.rank[yset] > self.rank[xset]:
      self.parent[yset] = xset
    else:
      # if xset and yset have the same rank, move either xset under yset
      # and increment rank of yset
      self.parent[xset] = yset
      self.rank[yset] += 1
